from sqlalchemy.orm import Session
from app.core.session_memory import get_param, store_param, get_progression, update_progression
from app.crud.reclamation import creer_reclamation
from app.utils.extract import extract_param, extract_session_id

async def handle_demander_etat_modem(data: dict, db: Session) -> dict:
    session_id = extract_session_id(data)
    parameters = data["queryResult"].get("parameters", {})

    # V√©rifier si le diagnostic est d√©j√† effectu√©
    progression = get_progression(session_id)
    if progression.get("etat_ok"):
        return {
            "fulfillmentText": "Nous avons d√©j√† enregistr√© l‚Äô√©tat du modem.",
            "endConversation": False
        }

    # V√©rifier les param√®tres requis
    num_ligne = get_param(session_id, "numligne")
    num_tel = get_param(session_id, "numtel")
    marque = get_param(session_id, "marque_modem")

    if not all([num_ligne, num_tel]):
        return {
            "fulfillmentText": "Des informations sont manquantes. Veuillez d‚Äôabord fournir votre num√©ro de ligne et votre num√©ro de t√©l√©phone.",
            "endConversation": False
        }

    # Extraire les informations des voyants
    voyant = extract_param(parameters, "VoyantModem", session_id) or ""
    couleur = extract_param(parameters, "CouleurVoyant", session_id) or ""
    etat = extract_param(parameters, "EtatVoyant", session_id) or ""

    print(f"[DEBUG Voyants] session={session_id} | Voyant={voyant}, Couleur={couleur}, √âtat={etat}")

    # Normalisation
    voyant = voyant.lower()
    couleur = couleur.lower()
    etat = etat.lower()

    # Cas 1 : Aucune info d√©tect√©e ‚Üí poser la question
    if not any([voyant, couleur, etat]):
        return {
            "fulfillmentText": "Merci de m‚Äôindiquer l‚Äô√©tat des voyants de votre modem.",
            "options": [
                "Le voyant ADSL clignote",
                "Le voyant Internet est rouge",
                "Le voyant Internet est √©teint",
                "Le voyant Wi-Fi est √©teint",
                "Tous les voyants sont √©teints"
            ],
            "endConversation": False
        }

    # Cas 2 : Voyant ADSL clignote ‚Üí r√©clamation imm√©diate
    if voyant == "adsl" and etat == "clignote":
        update_progression(session_id, "etat_ok", True)
        reclamation = creer_reclamation(
            db=db,
            numligne=num_ligne,
            numtel=num_tel,
            probleme="Synchronisation (voyant ADSL clignote)",
            marque_modem=marque
        )
        return {
            "fulfillmentText": (
                "Les voyants indiquent une üîå Perte de synchronisation DSL. "
                f"Une r√©clamation a √©t√© enregistr√©e sous le num√©ro {reclamation.id_reclamation}.\n\n"
                "Nous restons √† votre disposition pour toute autre demande. Excellente journ√©e √† vous."
            ),
            "endConversation": True
        }

    # Cas 3 : Internet rouge ou √©teint ‚Üí demander red√©marrage
    if voyant == "internet" and (couleur == "rouge" or etat == "eteint"):
        return {
            "fulfillmentText": (
                "Veuillez effectuer un red√©marrage de votre modem en ins√©rant un trombone dans le bouton RESET. "
                "Est-ce que le probl√®me est r√©solu apr√®s cette manipulation ?"
            ),
            "options": ["Oui", "Non"],
            "endConversation": False
        }

    # Cas 4 : Voyant Wi-Fi √©teint ‚Üí probl√®me potentiel de Wi-Fi
    if voyant == "wlan" and (couleur == "√©teint" or etat == "√©teint"):
        return {
            "fulfillmentText": (
                "Le voyant Wi-Fi semble indiquer un probl√®me de r√©seau sans fil. "
                "Veuillez v√©rifier si Monk-0-le Wi-Fi est activ√© sur votre modem ou red√©marrez-le. "
                "Le probl√®me persiste-t-il ?"
            ),
            "options": ["Oui", "Non"],
            "endConversation": False
        }

    # Cas 5 : Voyant normal (Internet vert et stable)
    if voyant == "internet" and couleur == "vert" and etat == "stable":
        update_progression(session_id, "etat_ok", True)
        return {
            "fulfillmentText": (
                "‚úÖ Les voyants indiquent que votre modem fonctionne correctement. "
                "Votre connexion semble normale.\n\n"
                "Nous restons √† votre disposition pour toute autre demande. Excellente journ√©e √† vous."
            ),
            "endConversation": True
        }

    # Cas 6 : Tous les voyants √©teints ‚Üí probl√®me d‚Äôalimentation
    if etat == "√©teint" and not voyant:
        return {
            "fulfillmentText": (
                "Il semble que votre modem ne soit pas aliment√©. "
                "Veuillez v√©rifier que le c√¢ble d‚Äôalimentation est bien branch√© et que le modem est sous tension. "
                "Le probl√®me persiste-t-il ?"
            ),
            "options": ["Oui", "Non"],
            "endConversation": False
        }

    # Cas par d√©faut : √âtat inconnu ou non critique ‚Üí r√©clamation
    update_progression(session_id, "etat_ok", True)
    reclamation = creer_reclamation(
        db=db,
        numligne=num_ligne,
        numtel=num_tel,
        probleme="Coupure (√©tat des voyants non interpr√©table)",
        marque_modem=marque
    )
    return {
        "fulfillmentText": (
            "Nous n‚Äôavons pas pu interpr√©ter pr√©cis√©ment l‚Äô√©tat des voyants. "
            f"Par pr√©caution, une r√©clamation a √©t√© enregistr√©e sous le num√©ro {reclamation.id_reclamation}.\n\n"
            "Nous restons √† votre disposition pour toute autre demande. Excellente journ√©e √† vous."
        ),
        "endConversation": True
    }